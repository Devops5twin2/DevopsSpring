pipeline {
    agent {
        label 'agent1'
    }

    triggers {
        githubPush()
    }

    environment {
        registry = "malekzlitni/dockerhub"
        registryCredential = 'dockerhub'
        dockerImage = ''
    }

    stages {
        stage('Git') {
            steps {
                echo 'Getting Project from Git'
                git branch: 'malek',
                    credentialsId: 'gitTokenn',
                    url: 'https://github.com/Devops5twin2/DevopsSpring.git'
            }
        }

        stage('Testing') {
            steps {
                sh 'chmod +x mvnw'
                sh './mvnw test -Dspring.profiles.active=test'
            }
        }

        stage('MVN SONARQUBE') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${registry}:SpringImage")
                }
            }
        }

        stage('Deploy Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Start Nexus and SQL') {
            steps {
                script {
                    sh 'sudo docker-compose -f docker-compose.yml up -d mysqldb'
                }
            }
        }

        stage('Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        stage('Maven Build and Deploy to Nexus') {
            steps {
                sh 'chmod +x mvnw'
                sh './mvnw clean deploy -Dspring.profiles.active=prod -DskipTests'
            }
        }

        stage('Build and Start Spring Application') {
            steps {
                script {
                    sh 'sudo docker-compose -f docker-compose.yml up -d my-spring-app'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully'
        }
        failure {
            echo 'Pipeline failed.'
            // sh 'sudo docker-compose -f docker-compose.yml down'
        }
    }
}
